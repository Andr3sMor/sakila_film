name: Ejecutar Glue ETL Incremental

on:
  push:
    branches: ["main"]
    paths:
      - 'glue_scripts/etl_rental.py' 
      - 'tests/test_etl_rental.py'
      - 'requirements.txt'
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  run-glue-job:
    name: AWS Glue Incremental ETL (Ayer y Hoy)
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      GLUE_JOB_NAME: glue-rental-job
      S3_SCRIPT_PATH: s3://cmjm-datalake/scripts/etl_rental.py
      GLUE_ROLE: arn:aws:iam::<TU_ACCOUNT_ID>:role/AWSGlueServiceRoleDefault  # üëà reemplaza con tu ARN real

    steps:
      # -----------------------------
      # Checkout del repositorio
      # -----------------------------
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      # -----------------------------
      # Configurar credenciales de AWS
      # -----------------------------
      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      # -----------------------------
      # 3. Subir el script actualizado a S3
      # -----------------------------
      - name: Subir script de Glue al bucket S3
        run: |
          echo "Subiendo etl_rental.py al bucket..."
          aws s3 cp glue_scripts/etl_rental.py ${{ env.S3_SCRIPT_PATH }} --region ${{ env.AWS_REGION }}
          echo "Script actualizado en ${{ env.S3_SCRIPT_PATH }}"

      # -----------------------------
      # 4. Crear o actualizar el Glue Job
      # -----------------------------
      - name: Crear o actualizar Glue Job con el nuevo script
        run: |
          echo "Verificando existencia del Glue Job: ${{ env.GLUE_JOB_NAME }}"

          set +e
          ROLE=$(aws glue get-job \
            --job-name ${{ env.GLUE_JOB_NAME }} \
            --query 'Job.Role' --output text 2>/dev/null)
          EXISTE=$?
          set -e

          if [ $EXISTE -ne 0 ]; then
            echo "El Glue Job no existe. Creando uno nuevo..."

            aws glue create-job \
              --name ${{ env.GLUE_JOB_NAME }} \
              --role ${{ env.GLUE_ROLE }} \
              --command "{
                \"Name\": \"glueetl\",
                \"ScriptLocation\": \"${{ env.S3_SCRIPT_PATH }}\",
                \"PythonVersion\": \"3\"
              }" \
              --glue-version "4.0" \
              --default-arguments "{
                \"--job-language\": \"python\",
                \"--enable-continuous-cloudwatch-log\": \"true\",
                \"--enable-s3-parquet-optimized-committer\": \"true\"
              }" \
              --max-capacity 2

            echo "Glue Job creado exitosamente."
          else
            echo "Glue Job encontrado. Actualizando con nuevo script..."
            aws glue update-job \
              --job-name ${{ env.GLUE_JOB_NAME }} \
              --job-update "{
                \"Role\": \"$ROLE\",
                \"Command\": {
                  \"Name\": \"glueetl\",
                  \"ScriptLocation\": \"${{ env.S3_SCRIPT_PATH }}\",
                  \"PythonVersion\": \"3\"
                },
                \"GlueVersion\": \"4.0\",
                \"DefaultArguments\": {
                  \"--job-language\": \"python\",
                  \"--enable-continuous-cloudwatch-log\": \"true\",
                  \"--enable-s3-parquet-optimized-committer\": \"true\"
                },
                \"MaxCapacity\": 2
              }"
            echo "Glue Job actualizado correctamente."
          fi

      # -----------------------------
      #Ejecutar Glue Job para ayer y hoy
      # -----------------------------
      - name: Ejecutar Glue Job para ayer y hoy
        run: |
          echo "Ejecutando Glue Job para dos fechas (ayer y hoy)..."

          HOY=$(date -u +"%Y-%m-%d")
          AYER=$(date -u -d "yesterday" +"%Y-%m-%d")
          FECHAS=($AYER $HOY)

          for FECHA in "${FECHAS[@]}"; do
            echo "Lanzando Glue Job para fecha $FECHA ..."
            
            JOB_RUN_ID=$(aws glue start-job-run \
              --job-name ${{ env.GLUE_JOB_NAME }} \
              --arguments "{\"--PROCESSING_DATE\":\"$FECHA\"}" \
              --query 'JobRunId' --output text)

            echo "JobRunId: $JOB_RUN_ID"
            echo "Esperando a que finalice la ejecuci√≥n para $FECHA ..."

            # Esperar que termine cada job antes de lanzar el siguiente
            while true; do
              STATUS=$(aws glue get-job-run \
                --job-name ${{ env.GLUE_JOB_NAME }} \
                --run-id "$JOB_RUN_ID" \
                --query 'JobRun.JobRunState' --output text)
              
              if [[ "$STATUS" == "SUCCEEDED" ]]; then
                echo "Job completado con √©xito para $FECHA"
                break
              elif [[ "$STATUS" == "FAILED" || "$STATUS" == "STOPPED" ]]; then
                echo "Job fall√≥ para $FECHA con estado: $STATUS"
                exit 1
              else
                echo "Estado actual ($FECHA): $STATUS ... esperando 60s"
                sleep 60
              fi
            done
          done

      # -----------------------------
      # 6. Confirmaci√≥n final
      # -----------------------------
      - name: Despliegue exitoso
        if: success()
        run: echo "Todos los Glue Jobs se ejecutaron exitosamente (ayer y hoy)."
