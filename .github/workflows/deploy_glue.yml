name: CICD Pipeline AWS Glue ETL

on:
  push:
    branches: [main]
    paths:
      - glue_scripts/*.py
      - tests/*.py
      - requirements.txt
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # --------------------------------------------------
  # 1. Tests Unitarios (Mocking)
  # --------------------------------------------------
  test:
    name: Run ETL Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install dependencies and set up environment
        run: |
          python3 -m venv env-test
          source env-test/bin/activate
          pip install pytest mock boto3 botocore pyspark

      - name: Run ETL Tests
        run: |
          source env-test/bin/activate
          export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
          pytest tests/ -v

  # --------------------------------------------------
  # 2. Despliegue de AWS Glue Jobs (Crear/Actualizar)
  # --------------------------------------------------
  deploy-glue:
    name: Deploy AWS Glue Scripts and Update Jobs
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # --------------------------------------------------
      # Subir los scripts a S3
      # --------------------------------------------------
      - name: Upload Glue Scripts to S3
        id: upload
        run: |
          VERSION=$(date +%Y%m%d%H%M%S)
          SCRIPTS=("dim_customer.py" "dim_film.py" "dim_store.py" "dim_date.py" "etl_rental.py")
          S3_BUCKET=${{ secrets.S3_BUCKET_SCRIPTS }}

          for SCRIPT in "${SCRIPTS[@]}"; do
            SCRIPT_LOCAL_PATH="glue_scripts/$SCRIPT"
            if [ ! -f "$SCRIPT_LOCAL_PATH" ]; then
              echo "Error: El script $SCRIPT no existe en la ruta $SCRIPT_LOCAL_PATH."
              exit 1
            fi
            S3_LOCATION=s3://$S3_BUCKET/$SCRIPT/$VERSION/$SCRIPT
            echo "Subiendo script $SCRIPT a $S3_LOCATION"
            aws s3 cp $SCRIPT_LOCAL_PATH $S3_LOCATION
            echo "GLUE_SCRIPT_PATH_${SCRIPT//./_}=$S3_LOCATION" >> $GITHUB_ENV
          done

      # --------------------------------------------------
      # Crear o Actualizar la Definición de los Glue Jobs
      # --------------------------------------------------
      - name: Create or Update AWS Glue Job Definitions
        run: |
          JOBS=("sakila-etl-dim-customer" "sakila-etl-dim-film" "sakila-etl-dim-store" "sakila-etl-dim-date" "sakila-etl-fact-rental")
          SCRIPTS=("dim_customer.py" "dim_film.py" "dim_store.py" "dim_date.py" "etl_rental.py")

          for i in "${!JOBS[@]}"; do
            JOB_NAME=${JOBS[$i]}
            SCRIPT=${SCRIPTS[$i]}
            SCRIPT_PATH=${{ env["GLUE_SCRIPT_PATH_"${SCRIPT//./_}]}}

            echo "Configurando job $JOB_NAME con script $SCRIPT_PATH"

            set +e
            aws glue get-job --job-name $JOB_NAME --region ${{ secrets.AWS_REGION }}
            EXIT_CODE=$?
            set -e

            if [ $EXIT_CODE -eq 0 ]; then
              # Job EXISTE → ACTUALIZAR
              echo "Job $JOB_NAME encontrado. Procediendo a ACTUALIZAR..."
              aws glue update-job \
                --job-name $JOB_NAME \
                --region ${{ secrets.AWS_REGION }} \
                --job-update "{
                  \"Role\": \"${{ secrets.AWS_GLUE_ROLE_ARN }}\",
                  \"Command\": {
                    \"Name\": \"glueetl\",
                    \"ScriptLocation\": \"$SCRIPT_PATH\",
                    \"PythonVersion\": \"3\"
                  },
                  \"Connections\": {
                    \"Connections\": [\"${{ secrets.JDBC_CONNECTION_NAME }}\"]
                  },
                  \"GlueVersion\": \"3.0\"
                }"
            elif [ $EXIT_CODE -eq 254 ]; then
              # Job NO EXISTE → CREAR
              echo "Job $JOB_NAME no encontrado. Procediendo a CREAR..."
              aws glue create-job \
                --name $JOB_NAME \
                --role ${{ secrets.AWS_GLUE_ROLE_ARN }} \
                --region ${{ secrets.AWS_REGION }} \
                --command Name=glueetl,ScriptLocation=$SCRIPT_PATH,PythonVersion=3 \
                --glue-version 3.0 \
                --number-of-workers 2 \
                --worker-type G.1X \
                --connections "{\"Connections\": [\"${{ secrets.JDBC_CONNECTION_NAME }}\"]}" \
                --default-arguments '{\"--PROCESSING_DATE\": \"2000-01-01\", \"--job-bookmark-option\": \"job-bookmark-disable\"}'
            else
              echo "Error desconocido al intentar obtener o crear el Job. Código: $EXIT_CODE"
              exit 1
            fi
          done

      # --------------------------------------------------
      # 3. Ejecutar los Glue Jobs para dos días (Prueba Incremental)
      # --------------------------------------------------
      - name: Run Glue Jobs for Two Processing Dates (Sequential Wait)
        run: |
          echo "Ejecutando Glue Jobs para dos días de prueba secuencialmente..."
          JOBS=("sakila-etl-dim-customer" "sakila-etl-dim-film" "sakila-etl-dim-store" "sakila-etl-dim-date" "sakila-etl-fact-rental")
          TODAY=$(date +%Y-%m-%d)
          YESTERDAY=$(date -d "yesterday" +%Y-%m-%d)
          MAX_WAIT_MINUTES=15

          for JOB_NAME in "${JOBS[@]}"; do
            for DATE in "$YESTERDAY" "$TODAY"; do
              echo "Lanzando Glue Job $JOB_NAME para fecha $DATE"
              JOB_RUN_ID=$(aws glue start-job-run \
                --job-name "$JOB_NAME" \
                --region ${{ secrets.AWS_REGION }} \
                --arguments '{"--PROCESSING_DATE": "'"$DATE"'"}' \
                --query JobRunId \
                --output text)
              echo "JobRunId: $JOB_RUN_ID"
              echo "Esperando a que finalice la ejecución para $JOB_NAME en $DATE..."
              WAITED=0
              STATE="STARTING"

              while [ "$STATE" == "STARTING" ] || [ "$STATE" == "RUNNING" ] || [ "$STATE" == "STOPPING" ]; do
                if [ $WAITED -ge $MAX_WAIT_MINUTES ]; then
                  echo "Error: Tiempo máximo de espera alcanzado ($MAX_WAIT_MINUTES min)."
                  aws glue stop-job-run --job-name "$JOB_NAME" --run-id "$JOB_RUN_ID" --region ${{ secrets.AWS_REGION }} || true
                  exit 1
                fi
                sleep 60
                WAITED=$((WAITED+1))
                STATE=$(aws glue get-job-run \
                  --job-name "$JOB_NAME" \
                  --run-id "$JOB_RUN_ID" \
                  --query 'JobRun.JobRunState' \
                  --region ${{ secrets.AWS_REGION }} \
                  --output text)
                echo "Estado actual ($JOB_NAME, $DATE): $STATE (min: $WAITED)"
              done

              if [ "$STATE" != "SUCCEEDED" ]; then
                echo "Error: El job $JOB_NAME falló para la fecha $DATE con estado $STATE"
                exit 1
              fi
              echo "Job $JOB_NAME completado exitosamente para la fecha $DATE"
            done
          done

      - name: Deployment Completed
        run: echo "Despliegue continuo de Glue Jobs y prueba incremental completados."
