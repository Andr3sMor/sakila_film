name: Deploy and Run AWS Glue Jobs

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ROLE_ARN: arn:aws:iam::848073509548:role/AWSGlueServiceRoleDefault
  SCRIPT_BUCKET: cmjm-scripts
  TEMP_DIR: s3://cmjm-datalake/temp/
  GLUE_VERSION: 4.0
  PYTHON_VERSION: 3
  CONNECTION_NAME: Jdbc connection

jobs:
  deploy-glue-jobs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload scripts to S3
        run: |
          echo "Uploading ETL scripts to S3..."
          aws s3 cp src/etl_dim_customer.py s3://${SCRIPT_BUCKET}/scripts/etl_dim_customer.py
          aws s3 cp src/etl_dim_film.py s3://${SCRIPT_BUCKET}/scripts/etl_dim_film.py
          aws s3 cp src/etl_dim_store.py s3://${SCRIPT_BUCKET}/scripts/etl_dim_store.py
          aws s3 cp src/etl_dim_date.py s3://${SCRIPT_BUCKET}/scripts/etl_dim_date.py
          aws s3 cp src/etl_rental.py s3://${SCRIPT_BUCKET}/scripts/etl_rental.py

      - name: Create or update Glue Jobs
        run: |
          echo "Creating or updating AWS Glue Jobs..."

          JOBS=("sakila-etl-dim-date" "sakila-etl-dim-customer" "sakila-etl-dim-film" "sakila-etl-dim-store" "sakila-etl-fact-rental")
          SCRIPTS=("etl_dim_date.py" "etl_dim_customer.py" "etl_dim_film.py" "etl_dim_store.py" "etl_rental.py")

          for i in "${!JOBS[@]}"; do
            JOB_NAME=${JOBS[$i]}
            SCRIPT_NAME=${SCRIPTS[$i]}
            echo "Processing job: $JOB_NAME"

            if aws glue get-job --job-name "$JOB_NAME" >/dev/null 2>&1; then
              echo "Updating existing job: $JOB_NAME"
              aws glue update-job \
                --job-name "$JOB_NAME" \
                --job-update '{
                  "Role": "'${ROLE_ARN}'",
                  "Command": {
                    "Name": "glueetl",
                    "ScriptLocation": "s3://'${SCRIPT_BUCKET}'/scripts/'${SCRIPT_NAME}'",
                    "PythonVersion": "'${PYTHON_VERSION}'"
                  },
                  "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable",
                    "--TempDir": "'${TEMP_DIR}'",
                    "--enable-continuous-cloudwatch-log": "true",
                    "--connection_name": "'${CONNECTION_NAME}'"
                  },
                  "GlueVersion": "'${GLUE_VERSION}'",
                  "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                  },
                  "MaxRetries": 0
                }'
            else
              echo "Creating new job: $JOB_NAME"
              aws glue create-job \
                --name "$JOB_NAME" \
                --role "$ROLE_ARN" \
                --command '{
                  "Name": "glueetl",
                  "ScriptLocation": "s3://'${SCRIPT_BUCKET}'/scripts/'${SCRIPT_NAME}'",
                  "PythonVersion": "'${PYTHON_VERSION}'"
                }' \
                --default-arguments '{
                  "--job-bookmark-option": "job-bookmark-enable",
                  "--TempDir": "'${TEMP_DIR}'",
                  "--enable-continuous-cloudwatch-log": "true",
                  "--connection_name": "'${CONNECTION_NAME}'"
                }' \
                --glue-version "${GLUE_VERSION}" \
                --execution-property '{"MaxConcurrentRuns":1}' \
                --max-retries 0
            fi
          done

      - name: Run Glue Jobs Sequentially
        run: |
          echo "Running Glue Jobs in order..."
          JOBS=("sakila-etl-dim-date" "sakila-etl-dim-customer" "sakila-etl-dim-film" "sakila-etl-dim-store" "sakila-etl-fact-rental")

          for JOB_NAME in "${JOBS[@]}"; do
            echo "Launching Glue Job: $JOB_NAME"
            JOB_RUN_ID=$(aws glue start-job-run --job-name "$JOB_NAME" --query 'JobRunId' --output text)
            echo "Waiting for completion of $JOB_NAME (Run ID: $JOB_RUN_ID)..."
            aws glue get-job-run --job-name "$JOB_NAME" --run-id "$JOB_RUN_ID" --query 'JobRun.State' --output text

            STATUS=$(aws glue get-job-run --job-name "$JOB_NAME" --run-id "$JOB_RUN_ID" --query 'JobRun.JobRunState' --output text)
            until [[ "$STATUS" == "SUCCEEDED" || "$STATUS" == "FAILED" || "$STATUS" == "STOPPED" ]]; do
              sleep 30
              STATUS=$(aws glue get-job-run --job-name "$JOB_NAME" --run-id "$JOB_RUN_ID" --query 'JobRun.JobRunState' --output text)
              echo "Status for $JOB_NAME: $STATUS"
            done

            if [[ "$STATUS" != "SUCCEEDED" ]]; then
              echo "❌ Job $JOB_NAME failed with status $STATUS"
              exit 1
            fi
            echo "✅ Job $JOB_NAME completed successfully"
          done
