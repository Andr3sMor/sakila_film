name: Ejecutar Glue ETL Incremental

on:
  on:
  push:
    branches: ["main"]
    paths:
      - 'glue_scripts/etl_rental.py' 
      - 'tests/test_etl_rental.py'
      - 'requirements.txt'
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  run-glue-job:
    name: AWS Glue Incremental ETL (Ayer y Hoy)
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      GLUE_JOB_NAME: glue-rental-job
      S3_SCRIPT_PATH: s3://cmjm-datalake/scripts/etl_rental.py

    steps:
      # -----------------------------
      # 1Ô∏è‚É£ Checkout del repositorio
      # -----------------------------
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      # -----------------------------
      # 2Ô∏è‚É£ Configurar credenciales de AWS
      # -----------------------------
      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      # -----------------------------
      # 3Ô∏è‚É£ Subir el script actualizado a S3
      # -----------------------------
      - name: Subir script de Glue al bucket S3
        run: |
          echo "üì§ Subiendo etl_rental.py al bucket..."
          aws s3 cp glue_scripts/etl_rental.py ${{ env.S3_SCRIPT_PATH }} --region ${{ env.AWS_REGION }}
          echo "‚úÖ Script actualizado en ${{ env.S3_SCRIPT_PATH }}"

      # -----------------------------
      # 4Ô∏è‚É£ Actualizar Glue Job con el nuevo script
      # -----------------------------
      - name: Actualizar Glue Job con nuevo script
        run: |
          echo "üîÑ Actualizando Glue Job: ${{ env.GLUE_JOB_NAME }}"
          
          ROLE=$(aws glue get-job \
            --job-name ${{ env.GLUE_JOB_NAME }} \
            --query 'Job.Role' --output text)

          echo "üß© Rol actual: $ROLE"

          aws glue update-job \
            --job-name ${{ env.GLUE_JOB_NAME }} \
            --job-update "{
              \"Role\": \"$ROLE\",
              \"Command\": {
                \"Name\": \"glueetl\",
                \"ScriptLocation\": \"${{ env.S3_SCRIPT_PATH }}\",
                \"PythonVersion\": \"3\"
              },
              \"GlueVersion\": \"4.0\",
              \"DefaultArguments\": {
                \"--job-language\": \"python\",
                \"--enable-continuous-cloudwatch-log\": \"true\",
                \"--enable-s3-parquet-optimized-committer\": \"true\"
              },
              \"MaxCapacity\": 2
            }"

          echo "‚úÖ Glue Job actualizado correctamente."

      # -----------------------------
      # 5Ô∏è‚É£ Ejecutar Glue Job para ayer y hoy
      # -----------------------------
      - name: Ejecutar Glue Job para ayer y hoy
        run: |
          echo "üöÄ Ejecutando Glue Job para dos fechas (ayer y hoy)..."

          HOY=$(date -u +"%Y-%m-%d")
          AYER=$(date -u -d "yesterday" +"%Y-%m-%d")
          FECHAS=($AYER $HOY)

          for FECHA in "${FECHAS[@]}"; do
            echo "‚ñ∂Ô∏è Lanzando Glue Job para fecha $FECHA ..."
            
            JOB_RUN_ID=$(aws glue start-job-run \
              --job-name ${{ env.GLUE_JOB_NAME }} \
              --arguments "{\"--PROCESSING_DATE\":\"$FECHA\"}" \
              --query 'JobRunId' --output text)

            echo "JobRunId: $JOB_RUN_ID"
            echo "Esperando a que finalice la ejecuci√≥n para $FECHA ..."

            while true; do
              STATUS=$(aws glue get-job-run \
                --job-name ${{ env.GLUE_JOB_NAME }} \
                --run-id "$JOB_RUN_ID" \
                --query 'JobRun.JobRunState' --output text)
              
              if [[ "$STATUS" == "SUCCEEDED" ]]; then
                echo "‚úÖ Job completado con √©xito para $FECHA"
                break
              elif [[ "$STATUS" == "FAILED" || "$STATUS" == "STOPPED" ]]; then
                echo "‚ùå Job fall√≥ para $FECHA con estado: $STATUS"
                exit 1
              else
                echo "‚è≥ Estado actual ($FECHA): $STATUS ... esperando 60s"
                sleep 60
              fi
            done
          done

      # -----------------------------
      # 6Ô∏è‚É£ Confirmaci√≥n final
      # -----------------------------
      - name: Despliegue exitoso
        if: success()
        run: echo "üéâ Todos los Glue Jobs se ejecutaron exitosamente (ayer y hoy)."
