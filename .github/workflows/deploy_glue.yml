name: CICD Pipeline AWS Glue ETL

on:
  push:
    branches: [main]
    paths:
      # Se activa solo cuando el codigo ETL o de prueba cambian
      - glue_scripts/etl_rental.py
      - tests/test_etl_rental.py
      - requirements.txt
  pull_request:
    branches: [main]
  workflow_dispatch: 

jobs:
  # --------------------------------------------------
  # 1. Tests Unitarios (Mocking)
  # --------------------------------------------------
  test:
    name: Run ETL Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
          
      - name: Install dependencies and set up environment
        run: |
          python3 -m venv env-test
          source env-test/bin/activate
          # Instala dependencias necesarias para la prueba
          pip install pytest mock boto3 botocore pyspark
          
      - name: Run ETL Tests
        run: |
          source env-test/bin/activate
          export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
          pytest tests/test_etl_rental.py -v

  # --------------------------------------------------
  # 2. Despliegue de AWS Glue Job (Crear/Actualizar)
  # --------------------------------------------------
  deploy-glue:
    name: Deploy AWS Glue Script and Update Job
    runs-on: ubuntu-latest
    needs: test # Solo se ejecuta si los tests pasan
    
    # Define variables de entorno del proyecto (REEMPLAZAR LOS VALORES < >)
    env:
      AWS_REGION: <TU_REGION_AWS> # EJ: us-east-1
      S3_BUCKET_SCRIPTS: <TU_BUCKET_SCRIPTS_GLUE> # EJ: sakila-etl-scripts-2025
      GLUE_JOB_NAME: sakila-etl-fact-rental
      SCRIPT_LOCAL_PATH: glue_scripts/etl_rental.py
      CONNECTION_NAME: sakila-rds-connection
      GLUE_VERSION: 4.0
      
      # INFORMACION SENSIBLE REQUERIDA PARA CREACION DEL JOB
      IAM_ROLE_ARN: arn:aws:iam::<TU_ACCOUNT_ID>:role/<TU_ROL_DE_GLUE> 

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Credenciales del usuario de despliegue (Secrets de GitHub)
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} 
          aws-region: ${{ env.AWS_REGION }}

      # -----------------------------------------------
      # 2a. Subir el script versionado a S3
      # -----------------------------------------------
      - name: Upload Glue Script to S3
        id: upload
        run: |
          VERSION=$(date +%Y%m%d%H%M%S) 
          S3_LOCATION=s3://${{ env.S3_BUCKET_SCRIPTS }}/fact_rental/$VERSION/$(basename ${{ env.SCRIPT_LOCAL_PATH }})
          
          echo Subiendo script a $S3_LOCATION
          aws s3 cp ${{ env.SCRIPT_LOCAL_PATH }} $S3_LOCATION
          
          echo GLUE_SCRIPT_PATH=$S3_LOCATION >> $GITHUB_ENV

      # -----------------------------------------------
      # 2b. Crear o Actualizar la Definicion del Glue Job
      # -----------------------------------------------
      - name: Create or Update AWS Glue Job Definition
        run: |
          JOB_NAME=${{ env.GLUE_JOB_NAME }}
          SCRIPT_PATH=${{ env.GLUE_SCRIPT_PATH }}

          # LÃ³gica para determinar si el Job existe
          set +e 
          aws glue get-job --job-name $JOB_NAME
          EXIT_CODE=$?
          set -e 

          if [ $EXIT_CODE -eq 0 ]; then
            # Job existe: ACTUALIZAR
            echo Job $JOB_NAME encontrado. Procediendo a ACTUALIZAR...
            # Usando la sintaxis simplificada para --job-update
            aws glue update-job \
              --job-name $JOB_NAME \
              --job-update "Role=${{ env.IAM_ROLE_ARN }},Command={Name=glueetl,ScriptLocation=$SCRIPT_PATH}"
            
          elif [ $EXIT_CODE -eq 254 ]; then
            # Job NO existe: CREAR
            echo Job $JOB_NAME no encontrado. Procediendo a CREAR...
            # Usando la sintaxis de creacion
            aws glue create-job \
              --name $JOB_NAME \
              --role ${{ env.IAM_ROLE_ARN }} \
              --command Name=glueetl,ScriptLocation=$SCRIPT_PATH \
              --glue-version ${{ env.GLUE_VERSION }} \
              --number-of-workers 5 \
              --worker-type G.1X \
              --connections ${{ env.CONNECTION_NAME }} \
              --default-arguments '{"--PROCESSING_DATE": "2000-01-01", "--job-bookmark-option": "job-bookmark-disable"}'
          else
            echo Error desconocido al intentar obtener o crear el Job. Codigo: $EXIT_CODE
            exit 1
          fi

      # -----------------------------------------------
      # 2c. Ejecutar el Glue Job para los dos dias (Prueba de Incrementalidad)
      # -----------------------------------------------
      - name: Run Glue Job for Two Processing Dates (Sequential)
        run: |
          echo Ejecutando Glue Job para dos dias de prueba
          
          # Calcular las fechas de prueba
          TODAY=$(date +%Y-%m-%d)
          YESTERDAY=$(date -d yesterday +%Y-%m-%d)
          
          # La ejecucion secuencial de los dos dias prueba la incrementalidad
          for DATE in $YESTERDAY $TODAY; do
            echo Lanzando Glue Job para fecha $DATE
            JOB_RUN_ID=$(aws glue start-job-run \
              --job-name ${{ env.GLUE_JOB_NAME }} \
              --arguments '{"--PROCESSING_DATE": "'"$DATE"'"}' \
              --query JobRunId \
              --output text)

            echo JobRunId: $JOB_RUN_ID

            # Nota: Aqui se omitio el bucle de espera para no detener el CI/CD, pero se lanza el Job.
            echo Revisa la consola de AWS para el estado del Job: $JOB_RUN_ID
          done

      - name: Deployment Completed
        run: echo Despliegue continuo de Glue Job completado.