name: CI/CD Pipeline (AWS Glue ETL)

on:
  push:
    branches: ["main"]
    paths:
      # Solo se dispara si hay cambios relevantes en los scripts o tests
      - 'glue_scripts/etl_rental.py' 
      - 'tests/test_etl_rental.py'
      - 'requirements.txt'
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # -----------------------------
  # 1. Tests de Integración Funcional (ETL)
  # -----------------------------
  test:
    name: Run ETL Integration Test
    runs-on: ubuntu-latest
    
    # Se recomienda Python 3.9 o superior para compatibilidad con librerías modernas
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9" 
          
      - name: Set up Test Environment
        run: |
          python3 -m venv env-test
          source env-test/bin/activate
          # Instala dependencias para el test (pytest, mock, boto3, etc.)
          pip install pytest mock boto3 botocore pyspark awsglue

      - name: Run ETL Tests
        run: |
          source env-test/bin/activate
          # Asegura que el directorio de scripts esté en el path para la importación
          export PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH
          
          # Ejecuta tu test de integración
          pytest tests/test_etl_rental.py -v

  # -----------------------------
  # 2. Despliegue de AWS Glue Job
  # -----------------------------
  deploy-glue:
    name: Deploy AWS Glue Script
    runs-on: ubuntu-latest
    needs: test # Solo se ejecuta si los tests son exitosos
    
    # Define la región de AWS una vez
    env:
      AWS_REGION: us-east-1 
      S3_BUCKET_SCRIPTS: scripts-glue2
      GLUE_JOB_NAME: sakila-etl-fact-rental
      SCRIPT_LOCAL_PATH: glue_scripts/etl_rental.py

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      # Subir el script (etl_rental.py) a S3 (artefacto versionado)
      - name: Upload Glue Script to S3
        id: upload
        run: |
          VERSION=$(date +%Y%m%d%H%M%S) 
          S3_LOCATION="s3://${{ env.S3_BUCKET_SCRIPTS }}/fact_rental/$VERSION/$(basename ${{ env.SCRIPT_LOCAL_PATH }})"
          
          echo "Subiendo ${{ env.SCRIPT_LOCAL_PATH }} a $S3_LOCATION"
          aws s3 cp ${{ env.SCRIPT_LOCAL_PATH }} $S3_LOCATION
          
          echo "GLUE_SCRIPT_PATH=$S3_LOCATION" >> $GITHUB_ENV

      # Actualizar la definición del AWS Glue Job
      - name: Update AWS Glue Job Definition
        run: |
          echo "Actualizando Glue Job: ${{ env.GLUE_JOB_NAME }} con script: ${{ env.GLUE_SCRIPT_PATH }}"
          
          aws glue update-job \
            --job-name ${{ env.GLUE_JOB_NAME }} \
            --job-update '{"Command": {"Name": "glueetl", "ScriptLocation": "${{ env.GLUE_SCRIPT_PATH }}"}}'

      - name: Deployment Completed
        run: echo "Despliegue continuo de Glue Job completado."